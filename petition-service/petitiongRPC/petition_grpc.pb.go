// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: petition.proto

package petition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PetitionServiceClient is the client API for PetitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetitionServiceClient interface {
	AddSigningBoard(ctx context.Context, in *SignBoard, opts ...grpc.CallOption) (*Response, error)
	LaunchPetitionBoard(ctx context.Context, in *LaunchBoard, opts ...grpc.CallOption) (*Response, error)
}

type petitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetitionServiceClient(cc grpc.ClientConnInterface) PetitionServiceClient {
	return &petitionServiceClient{cc}
}

func (c *petitionServiceClient) AddSigningBoard(ctx context.Context, in *SignBoard, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/petition.petitionService/AddSigningBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petitionServiceClient) LaunchPetitionBoard(ctx context.Context, in *LaunchBoard, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/petition.petitionService/LaunchPetitionBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetitionServiceServer is the server API for PetitionService service.
// All implementations must embed UnimplementedPetitionServiceServer
// for forward compatibility
type PetitionServiceServer interface {
	AddSigningBoard(context.Context, *SignBoard) (*Response, error)
	LaunchPetitionBoard(context.Context, *LaunchBoard) (*Response, error)
	mustEmbedUnimplementedPetitionServiceServer()
}

// UnimplementedPetitionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPetitionServiceServer struct {
}

func (UnimplementedPetitionServiceServer) AddSigningBoard(context.Context, *SignBoard) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSigningBoard not implemented")
}
func (UnimplementedPetitionServiceServer) LaunchPetitionBoard(context.Context, *LaunchBoard) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchPetitionBoard not implemented")
}
func (UnimplementedPetitionServiceServer) mustEmbedUnimplementedPetitionServiceServer() {}

// UnsafePetitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetitionServiceServer will
// result in compilation errors.
type UnsafePetitionServiceServer interface {
	mustEmbedUnimplementedPetitionServiceServer()
}

func RegisterPetitionServiceServer(s grpc.ServiceRegistrar, srv PetitionServiceServer) {
	s.RegisterService(&PetitionService_ServiceDesc, srv)
}

func _PetitionService_AddSigningBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBoard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetitionServiceServer).AddSigningBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petition.petitionService/AddSigningBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetitionServiceServer).AddSigningBoard(ctx, req.(*SignBoard))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetitionService_LaunchPetitionBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchBoard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetitionServiceServer).LaunchPetitionBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petition.petitionService/LaunchPetitionBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetitionServiceServer).LaunchPetitionBoard(ctx, req.(*LaunchBoard))
	}
	return interceptor(ctx, in, info, handler)
}

// PetitionService_ServiceDesc is the grpc.ServiceDesc for PetitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petition.petitionService",
	HandlerType: (*PetitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSigningBoard",
			Handler:    _PetitionService_AddSigningBoard_Handler,
		},
		{
			MethodName: "LaunchPetitionBoard",
			Handler:    _PetitionService_LaunchPetitionBoard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petition.proto",
}
