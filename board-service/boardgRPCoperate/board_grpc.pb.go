// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: board.proto

package board

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoardServiceClient is the client API for BoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardServiceClient interface {
	LikeComment(ctx context.Context, in *LikeCommentInfo, opts ...grpc.CallOption) (*Response, error)
	ReleaseComment(ctx context.Context, in *ReleaseCommentInfo, opts ...grpc.CallOption) (*Response, error)
	CollectBoard(ctx context.Context, in *CollectBoardInfo, opts ...grpc.CallOption) (*Response, error)
	LikeBoard(ctx context.Context, in *LikeBoardInfo, opts ...grpc.CallOption) (*Response, error)
}

type boardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardServiceClient(cc grpc.ClientConnInterface) BoardServiceClient {
	return &boardServiceClient{cc}
}

func (c *boardServiceClient) LikeComment(ctx context.Context, in *LikeCommentInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/board.boardService/LikeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ReleaseComment(ctx context.Context, in *ReleaseCommentInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/board.boardService/ReleaseComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) CollectBoard(ctx context.Context, in *CollectBoardInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/board.boardService/CollectBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) LikeBoard(ctx context.Context, in *LikeBoardInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/board.boardService/LikeBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServiceServer is the server API for BoardService service.
// All implementations must embed UnimplementedBoardServiceServer
// for forward compatibility
type BoardServiceServer interface {
	LikeComment(context.Context, *LikeCommentInfo) (*Response, error)
	ReleaseComment(context.Context, *ReleaseCommentInfo) (*Response, error)
	CollectBoard(context.Context, *CollectBoardInfo) (*Response, error)
	LikeBoard(context.Context, *LikeBoardInfo) (*Response, error)
	mustEmbedUnimplementedBoardServiceServer()
}

// UnimplementedBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoardServiceServer struct {
}

func (UnimplementedBoardServiceServer) LikeComment(context.Context, *LikeCommentInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (UnimplementedBoardServiceServer) ReleaseComment(context.Context, *ReleaseCommentInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseComment not implemented")
}
func (UnimplementedBoardServiceServer) CollectBoard(context.Context, *CollectBoardInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectBoard not implemented")
}
func (UnimplementedBoardServiceServer) LikeBoard(context.Context, *LikeBoardInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeBoard not implemented")
}
func (UnimplementedBoardServiceServer) mustEmbedUnimplementedBoardServiceServer() {}

// UnsafeBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServiceServer will
// result in compilation errors.
type UnsafeBoardServiceServer interface {
	mustEmbedUnimplementedBoardServiceServer()
}

func RegisterBoardServiceServer(s grpc.ServiceRegistrar, srv BoardServiceServer) {
	s.RegisterService(&BoardService_ServiceDesc, srv)
}

func _BoardService_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.boardService/LikeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).LikeComment(ctx, req.(*LikeCommentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ReleaseComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCommentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ReleaseComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.boardService/ReleaseComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ReleaseComment(ctx, req.(*ReleaseCommentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_CollectBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectBoardInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).CollectBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.boardService/CollectBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).CollectBoard(ctx, req.(*CollectBoardInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_LikeBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeBoardInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).LikeBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.boardService/LikeBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).LikeBoard(ctx, req.(*LikeBoardInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardService_ServiceDesc is the grpc.ServiceDesc for BoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "board.boardService",
	HandlerType: (*BoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeComment",
			Handler:    _BoardService_LikeComment_Handler,
		},
		{
			MethodName: "ReleaseComment",
			Handler:    _BoardService_ReleaseComment_Handler,
		},
		{
			MethodName: "CollectBoard",
			Handler:    _BoardService_CollectBoard_Handler,
		},
		{
			MethodName: "LikeBoard",
			Handler:    _BoardService_LikeBoard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "board.proto",
}
